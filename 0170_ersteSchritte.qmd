# Erster Überblick

Eine Einführung in die Arbeit \git ist etwas 
schwierig, weil auf einen Schlag so viele neue 
Konzepte zu verarbeiten sind.

Wie beginnen mit einem Überblick und gehen dann 
immer mehr in die Feinheiten.

## Lokal -- Remote
Du kannst ganz alleine auf deinem Rechner mit \git arbeiten
und hast dann ein eigenes Repository -- und zwar ein 
lokales Repository. 

Sind an einem Projekt mehr Leute beteiligt, dann 
wird im Normalfall auf einem Server ein zentrales
Repository erstellt, von dem sich jeder Mitarbeiter
eine Kopie als lokales Repository auf den eigenen 
Rechner holt (clont).

Der Unterschied beim Arbeiten in den beiden Varianten ist,
dass die Änderungen der lokalen Repositories immer 
wieder ins zentrale Repository müssen (push) und  
dass sich die anderen Mitarbeiter diese Änderungen 
auch alle holen müssen (pull).

Natürlich kann es dabei passieren, dass verschiedene
Mitarbeiter die gleiche Datei verändern und dann müssen 
die entstehenden Konflikte *irgendwie* behoben werden.

In diesen wenigen Zeile stecken unwahrscheinlich viele 
Techniken, die wir im Rahmen dieses Workshops auf keinen 
Fall alle besprechen können.

## Idealer Ablauf
Beschränken wir uns zuerst auf den lokalen Fall 
und eine ideale Welt.  
In diesem Fall würdest du keine Fehler machen, 
immer genau wissen was du der Reihe nach machst -- 
perfekte Welt eben.  

Dein Arbeitsablauf wäre dann ganz einfach:

* Änderung programmieren
* Änderungen herrichten zum Protokollierung
* Änderung festschreiben im Protokoll

In der Sprache von \git werden die letzten
beiden Schritt als *add* und *commit* 
bezeichnet.

## Realistischer
Wahrscheinlich musst du ab und zu Dinge 
ausprobieren und willst dafür deinen 
funktionierenden Code nicht gefährden.  
In diesem Fall erstellst du einen 
parallelen Zweig (branch), in dem 
du in Ruhe arbeiten kannst. Wenn 
du mit deinem Ergebnis zufrieden bist,
dann übernimmst du deine Entwicklung --
wenn nicht, dann löschst du sie.

Man muss hier aber gleich sagen, dass
das eine extreme Vereinfachung der 
Realität darstellt. Mit Branches gibt 
es viele Varianten, die zu besprechen wären.

## Remote
Werfen wir noch einen kurzen Blick auf 
die Entwicklung im Team.  
Die Wahrscheinlichkeit für das Auftreten 
von Konflikten ist hier natürlich viel 
größer und da ist es sehr hilfreich, dass
\git uns unterstützt. Im Prinzip werden
bei der Konfliktlösung -- sofern nicht 
automatisch möglich -- beide (alle) Varianten
in die betroffene Datei geschrieben werden. 
Dabei wird jeweils die Herkunft angegeben 
und der Zuständige für Konfliktlösung 
kann löschen oder übernehmen, was er für 
richtig hält.

