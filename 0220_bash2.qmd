# Hands on II
Du wirst in diesem Abschnitt einige Dinge als redundant empfinden,
weil sie auch bereits im ersten *Hands On* bereits verwendet wurden.
Sieh es einfach als Übung und da du dieses PDF ohnehin nicht 
ausdrucken wirst, ist die minimal erhöhte Seitenzahl auch kein Problem.

Dieses Szenario ist etwas komplexer, da wir mit mehreren Dateien
arbeiten und auch parallele Ideen verfolgen wollen (branching).   
Da Programmieren zu lange dauert, erstellen wir in diesem 
Projekt ein kleines Buches mit Kurzgeschichten.
Die Geschichten wurden von einer KI generiert um den Arbeitsaufwand 
zu minimieren. 

Die Einzelteile der Geschichten befinden sich in einem \git-Repository
und müssen zunächst auf den lokalen Computer geclont werden. 
Das ist ein notwendiger Vorgriff auf den Abschnitt der Teamarbeit,
den du hier einfach mal ausführst.
Es handelt sich um ein öffentliches Repository, auf das auch ohne Benutzerkennung zugegriffen werden darf -- aber eben nur lesend. Aus diesem Grund
wird zum Clonen auch *https* und nicht *ssh* verwendet.
Öffne die \git-Bash (oder ein Terminal) und gib ein:


```bash
mkdir fortbildung
cd fortbildung
git clone https://TODO # Ziel: vorlage.git 
cd vorlage
```

## Labor
Es dürfte am einfachsten sein, wenn du zwei Terminals öffnest: 

* Eines für den Vorlagenordner 
* Eines für deinen Arbeitsordner

Du wirst ständig zwischen diesen Repositories wechseln müssen
und da sind einzelne Fenster optimal (Wechsel z.B. mit \alt{tab}).

\samplestart
Um der Erklärungen besser folgen zu können, wäre es sinnvoll,
wenn bei jedem Teilnehmer exakt die gleichen Hashwerte wie hier 
in der Anleitung entstehen würden. Leider ist das nicht so einfach,
weil die Hashwerte nicht reproduzierbar sind -- zumindest auf 
meinem Rechner! Aus diesem Grund wurden im Vorlagenverzeichnis
die Commits getagged, so dass du über ihre Namen auf sie zugreifen
kannst -- wie das geht, siehst du gleich!
\sampleend

**Erstellen eines Repositories**  
 
Öffne im Fortbilfungsordner eine \git-Bash und erstelle
ein Repository für das Buch.

```bash
# Eingaben
cd 
cd fortbildung
git init buch 
cd buch 
```   

Je nach Version von \git kommt hier eine längere Ausgabe ... oder auch nicht.

Im Ordner *fortbildungen* sollten nun also die Repositories `vorlage` 
und `buch` vorliegen.

**Erste Datei anlegen**  
Wechsle in das Fenster mit dem  Vorlagenordner und Checke *Step\_1* aus.
*Auschecken* wird später noch genauer erklärt!

```bash
git checkout Step_1
```

Kopiere die Datei \datei{story1.md} in den Ordner *buch*.  
Sie enthält (strategisch) nur einen Teil der Geschichte! Das Kopieren kann auch 
gerne mit der Maus im Explorer stattfinden. Wer allerdings nicht ständig
zwischen Tastatur und Maus wechseln möchte, der kann auch folgenden
Befehl verwenden:
  
```bash
# aktueller Ort ist das vorlagen-Fenster
cp story1.md  ../buch/ 
```

Wechsle in das Fortbildungsfenster
```bash
# Eingabe
git status

# Ausgabe
Auf Branch main # <1>

Noch keine Commits

Unversionierte Dateien:
  (benutzen Sie "git add <Datei>...", 
   um die Änderungen zum Commit vorzumerken)
	story1.md # <2>

nichts zum Commit vorgemerkt, aber es gibt unversionierte Dateien
(benutzen Sie "git add" zum Versionieren) # <3>
```
1. Geänderter Name ist ok.
2. Diese Datei ist betroffen, hier kann eine längere Liste stehen.
3. Empfohlener Befehl `git add story1.md` 


**Übertragen in den Stage**  
  
```bash
# Eingabe
git add story1.md
git status

# Ausgabe
Auf Branch main

Noch keine Commits

Zum Commit vorgemerkte Änderungen: # <1>
  (benutzen Sie "git rm --cached <Datei>..." 
   zum Entfernen aus der Staging-Area)
	neue Datei:     story1.md # <2>
```
1. Die Datei liegt auf dem Stage, bereit zum Commit
2. Nur diese eine Datei.

Der Hinweis `git rm --cached <Datei>` bewirkt nicht 
das Löschen der Datei aus dem Arbeitsverzeichnis, 
sondern aus dem Stage!

### Labor

Der erste Teil von \datei{story1.md} ist nun in die 
Versionierung aufgenommen, es wurde aber noch kein 
protokollierter Punkt in der Projektgeschichte 
(=commit) erstellt.

Du schreibst an deiner Geschichte weiter und damit ändert sich der 
Stand zwischen Arbeitsverzeichnis und Stage. 
Für dich bedeutet das nun wieder foglende Schritte:

* Wechsle in den Vorlagenordner
* Richtigen Stand auschecken: `git checkout Step_2`
* Kopieren der Datei: `cp story1.md ../buch/`
* Status checken: `git status`

```bash
# Ausgabe
Auf Branch main

Noch keine Commits

Zum Commit vorgemerkte Änderungen:
  (benutzen Sie "git rm --cached <Datei>..." 
   zum Entfernen aus der Staging-Area)
	neue Datei:     story1.md # <1>

Änderungen, die nicht zum Commit vorgemerkt sind:
  (benutzen Sie "git add <Datei>...", 
   um die Änderungen zum Commit vorzumerken)
  (benutzen Sie "git restore <Datei>...", um die Änderungen im
   Arbeitsverzeichnis zu verwerfen)
	geändert:       story1.md # <2>
```
1. Die alte Version der Datei ist zum Commit vorgemerkt
2. Die neuere Version ist noch nicht im Stage!

Wieder werden mögliche Befehle angegeben, 
die in diesem Zustand sinnvoll sein können!

\samplestart
**Hinweis**  
Wenn du versuchst, die Datei mit `git rm --cached story1.md` aus 
dem Stage zu löschen, bekommst du eine Fehlermeldung. 
Es könnte nämlich sein dass der Vorgang zu Datenverlust führt!
```bash
error: die folgende Datei hat zum Commit vorgemerkte Änderungen  
      unterschiedlich zu der Datei und HEAD:
         story1.md
(benutze *-f*, um die Löschung zu erzwingen)
```

Bei `git restore story1.md` gibt es keine solche Warnung! 
Die Datei verbleibt dabei auch im Stage unverändert erhalten.
\sampleend

Nun kannst du erstmalig eine Differenz zwischen den Versionen
der Datei erkennen:

```bash
git diff story1.md
```

### Analyse der Differenz

TODO: Neu aufbauen
```bash
diff --git a/story1.md b/story1.md # <1>
index 9c818e7..3126a18 100644          # <2>
--- a/story1.md                      # <3>
+++ b/story1.md
@@ -25,3 +25,63 @@  # <4>
entdeckte sie den geheimnisvollen Tunnel.    # <5>
  der gerade von einem seiner Flüge zurückgekehrt #<6>
  war und sich auf dem Ast des Apfelbaums niederließ. 
  +„Ich glaube, es ist ein Tunnel!“ miaute Luna #<7>
  +aufgeregt. „Vielleicht führt er zu einem verborgenen
```
1. Welche Dateien werden verglichen? `a/` und `b/` sind nur Kennzeichner der Dateien.
   `a/` ist die ältere (z.B. Stage) und `b/` die neuere Datei (z.B. Workingdir).
2. Bei 9c818e7 und 3126a18 handelt es sich um die Hash-Ids der beiden Dateien, die
   verglichen werden (dazu unten mehr).
3. Soll erneut klarstellen `---` ist alt, `+++` ist neu.
4. Die Zeile heißt *Hunk Header*. Er beginnt und endet mit `@@` 
5. In diesen Zeilen gab es keine Änderungen
6. Das ist vor der Änderung.
7. Diese Zeile steht in *b*.

Leider ist das Format vom *Hunk Header* etwas kryptisch!
Er gibt immer an, in welcher Zeile der Vergleich beginnt 
und wie viele Zeilen betroffen sind (vorher und nachher).
Bei `@@ -3,12 +3,14 @@` beginnt der relevante Bereich ab Zeile 3
und in der Ursprünglichen Version lagen 12 Zeilen vor, in der neuen
Version sind es jetzt 14. Die Änderungen im Detail folgen 
in den nächsten Zeileen.

### Hands on
Nun wird die Datei wieder zum Stage hinzugefügt und dann commitet:

*Eingabe*  
```bash
git add story1.md
git commit -m 'Guter Ansatz'
```

TODO:  Hash aktualisieren

*Ausgabe*  
```bash
[main (Root-Commit) 5229c6b] Guter Ansatz
 1 file changed, 4 insertions(+)
 create mode 100644 story1.md
```

### Labor 

Dieser Arbeitszyklus von *add, status, diff, commit* stellt 
den Kern der Arbeit mit \git dar, wenn man alleine arbeitet.
Allerdings gibt es noch weitere, sehr wichtige Techniken, 
die auch später bei der Arbeit im Team eine große Rolle spielen werden.

Du hast nun \datei{story1.md} so weit fertig gestellt und möchtest an
anderen Kurzgeschichten arbeiten. Du beschließt, dass fertige 
Geschichten und Arbeitesversionen an unterschiedlichen 
*Orten* aufgehoben werden sollen.

In der Softwareentwicklung sprechen wir hier von *fertigen Produkten*, 
die an den Kunden ausgeliefert werden und von 
*Experimenten, Features, Bugfixes, ...*, die parallel entwickelt
werden müssen. Durch ein Experiment darf die aktuell lauffähige 
Version Nicht beeinträchtigt werden! Du brauchst einen *Entwicklungszweig* 
und einen *Auslieferungszweig*.

```bash
# Zweig erstellen 
git switch -c entwicklung_story_2
```

*Git* teilt dir mit, dass du dich nun in diesem *Zweig* (=Branch) 
befindest. Du siehst hier immer noch deine aktuelle Story 1!
Sie ist ebenfalls in dem Branch enthaltne, du hast aber nicht vor,
an ihr zu arbeiten. Das wäre zwar möglich, würde aber mein Szenario
hier stören!

Nun beginnst du mit Story 2, indem du sie aus dem Vorlagenordner
kopierst.

* Wechsle in den Vorlagenordner
* Richtigen Stand auschecken: `git checkout Step_3`
* Kopieren der Datei: `cp story2.md ../buch/`
* Status checken: `git status`


Du bist mit deinem bisherigen Werk ganz zufrieden,
hast aber zwei Ideen, wie man du weiter machen könntest.
Aus diesem Grund erstellst du zunächst einen Commit

```bash
git add story2.md 
git commit -m "Story 2 begonnen"
```

und legst für jede Idee einen Branch an:

```bash
git switch -c story2_idee_1
git switch entwicklung_story_2
git switch -c story2_idee_2
```

Nun nicht den Überblick verlieren!
Im Branch \branch{story2\_idee\_1} arbeitest du an deiner 
Idee 1 von \datei{story2.md} weiter, im Branch \branch{story2\_idee\_2}
probierst du einen alternativen Verlauf.

Für dich heißt das:

* Im Fortbildungsordner: `git switch story_2_idee_1`
* Wechsle in den Vorlagenordner
* Richten Stand auschecken: `git checkout Step_4`
* Kopieren der Datei: `cp story2.md ../buch/`
* `git add story2.md`
* `git commit -m "Inhalt nach Idee1 fortgeführt"`

Da du aber noch nicht sicher bist, ob diese Version
verwenden willst, arbeitest auch Idee 2 aus.

* Im Fortbildungsordner: `git switch story_2_idee_2`
* Wechsle in den Vorlagenordner
* Richten Stand auschecken: `git checkout Step_5`
* Kopieren der Datei: `cp story2.md ../buch/`
* `git add story2.md`
* `git commit -m "Inhalt nach Idee 2 fortgeführt"`

Nun hast du das *Problem*, dass du drei Versionen hast:

1. Version 1 im Entwicklungszweig.  
   Sie ist die Stufe vor der Neubearbeitung.
2. Version 2 im Branch für Idee 1
3. Version 3 im Branch für Idee 2

Du bist unentschieden und siehst dir die 3 Versionen 
noch einmal in Ruhe an.

```bash
git switch story2_idee_1        # in Ruhe durchlesen
git switch story2_idee_2        # in Ruhe durchlesen 
git switch entwicklung_story_2  # in Ruhe durchlesen
```

Dabei fällt dir ein *grober Rechtschreibfehler* im Entwicklungszweig
auf, den du sofort korrigierst. Bei uns ist es das Wort *weiße*,
das sich anstelle von *weise* in den Text geschummelt hat.

* In den Vorlagenordner
* `git checkout Step_6`
* `cp story2.md ../buch/`

* Im Fortbildungsordner
* `git add story2.md`
* `git commit -m "typo 'weiße' korrigiert"`


Du musst dich nun entscheiden, mit welcher Version
du dein Projekt fortführen willst. In Wirklichkeit 
werden diese Branches natürlich deutlich länger sein, 
das Prinzip bleibt aber gleich!

Du entscheidest dich, dass du Idee 1 weiter verwenden 
willst und möchtest sie in den Entwicklungszweig 
übernehmen. In diesem Zweig solltest du aktuell 
gerade sein, überprüfst das aber:

```bash
git branch
# falls nötig
git switch entwicklung_story_2
```
Aus Sicherheitsgründen vergleichst du die Versionen 
kurz miteinander:

```bash
git diff --color-words entwicklung_story_2..story2_idee_1
```

Du siehst den Austausch des Wortes und den neu 
geschriebenen Text. Für \git ist das problemlos!

Nun führst du die Zweige zusammen:

```bash
git merge story2_idee_1  # erster Merge
```

\git erwartet von dir eine Begründung für den Merge.
Gib also *Vorläufig ok* ein, speichere und schließe 
den Editor.

Du bist erfreut, dass dieser Merge problemlos
funktioniert. 

Allerdings bist du am Überlegen, ob das mit der 
Schildkröte so eine gute Idee ist. 
Du entscheidest dich, eine *Riesen*schildkröte 
daraus zu machen. 
Aus Sicherheitsgründen willst du das aber zuerst im 
Ideen-Zweig ändern!

Routinemäßig machst du vorher einen *diff*.

```bash
git diff --color-words entwicklung_story_2..story2_idee_1
```

Beachte, dass du aktuell die Dateiversionen vergleichst,
die in den Commits stehen!

Den Unterschied *weise/weiße* siehst du immer noch, 
der ergänzte Text ist nun ja in beiden Dateien gleich.

Du wechselst in den Ideen-Branch und führst die 
Änderung durch:

```bash
git switch story2_idee_1 
sed -i -e "s/Schildkröte/Riesenschildkröte/g" story2.md
```

Zur Kontrolle machst du den Diff erneut:

```bash
# Vergleich der Banches - also das was in den letzen Commits steht
git diff --color-words entwicklung_story_2..story2_idee_1
```

Seltsam ... du siehst die Riesenschildkröte nicht im Diff. 
Aber eigentlich ist das klar, denn es werden ja die Versionen 
*in den Commits* verglichen und diese neue Version ist 
noch nicht im Commit. Momentan haben wir also die 
Situation:

```bash
# im Branch story2_idee_1
Work:   Riesenschildkröte
Stage:  LEER
Commit: Schildkröte
```

Ein einfaches 

```bash
git diff 
```

vergleicht die *aktuelle* Version im Workingdir gegen den Commit,
weil der Stage aktuell leer ist (siehe folgender Abschnitt)!
Hier siehst du die Riesenschildkröte und die einfache Schildkröte.

### Genauerer Blick auf Diff

Diese Diffs sind verwirrend, betrachten
wir einfachere Beispiele

**Variante 1:**  
Im Commit, dem Stage und dem Workingdir 
befinden sich (unterschiedliche) Versionen 
einer Datei: 
```bash
git init labor
cd labor 
echo "Version commit" > datei.txt 
git add datei.txt 
git commit -m "Version 1"

echo "Version stage" > datei.txt 
git add datei.txt 

echo "Version work" > datei.txt 
```

Nun wollen wir die einzelnen Versionen miteinander 
vergleichen. Das sind 3 Befehle:

1. work mit *stage*   
   `git diff datei.txt`  
   (DAS wird wichtig)
2. stage mit commit  
   `git diff --cached datei.txt`  oder  
   `git diff --staged datei.txt` 
3. work mit commit  
   Wenn man den Hash (z.B. 1234) vom Commit kennt, z.B. durch  
   `git log`, so kann man diesen verwenden   
   `git diff 1234 datei.txt`  
   Universeller ist 
   `git diff HEAD datei.txt` 


**Variante 2:**  
Im Commit und dem Workingdir 
befinden sich (unterschiedliche) Versionen 
einer Datei. *Der Stage ist aktuell leer.*
```bash
git init labor
cd labor 
echo "Version commit" > datei.txt 
git add datei.txt 
git commit -m "Version 1"

# auskommentiert
# echo "Version stage" > datei.txt 
# git add datei.txt 

echo "Version work" > datei.txt 
```

1. work mit *commit*   
   `git diff datei.txt`  
   (Weil der Stage leer ist)
2. stage mit commit  
   `git diff --cached datei.txt`  oder  
   `git diff --staged datei.txt` 
3. work mit commit  
   Wenn man den Hash (z.B. 1234) vom Commit kennt, z.B. durch  
   `git log`, so kann man diesen verwenden   
   `git diff 1234 datei.txt`  
   Universeller ist 
   `git diff HEAD datei.txt` 

Hier sind die Fälle 1) und 3) also identisch.  
Wie kann man also sicher sein, welche Dateien 
ein reines `git diff` vergleicht?  
Liefert `git status` einen leeren Stage, 
so wird mit dem Commit verglichen. Ist eine
Datei im Stage, so wird gegen diese Datei
verglichen.

### Labor
Die Version mit der Riesenschildkröte willst du nun wieder in den 
Entwicklungsstand mergen. Dafür musst du vorher wieder einen 
Commit machen.

```bash
git add story2.md 
git commit -m "Riesenschildkröte statt Schildkröte"
```

Du machst einen erneuten Vergleich der Branches mit Diff

```bash
# Wieder Branch-Vergleich 
git diff --color-words entwicklung_story_2..story2_idee_1
```

Da du den Schreibfehler ja nur im Entwicklungszweig verbessert hast,
siehst du folgende Situation:

Die *weiße Riesenschildkröte* (Schreibfehler aber
richtiges Tier) im Ideen-Branch und *weise Schildkröte* (Richtige Schreibung
aber falsches Tier) im Entwicklungs-Branch.  
In dieser Situation ist \git überfordert. Jeder der beiden
Texte ist falsch und deshalb musst du als Benutzer entscheiden,
was am Ende in der Datei stehen soll -- aber das sagt dir \git 
beim Merge!

```bash
git switch entwicklung_story_2
git merge story2_idee_1
```

Nun siehst du eine fette Fehlermeldung, weil die Versionen 
nicht mehr zusammenpassen! 
Gerade für Anfänger ist das eine unheimliche 
Situation, in der man anscheinend viel kaputt machen 
kann ... kann man ja auch. Es ist aber halb so tragisch!

Öffne die entsprechende Datei im Editor. Du erkennst
sofort die Stelle, an der Änderungen erfolgt sind:

```bash
Freddy war nicht allein. Seine beste Freundin,
<<<<<<< HEAD
Shelly, die weise Schildkröte, lebte ebenfalls am
=======
Shelly, die weiße Riesenschildkröte, lebte ebenfalls am
>>>>>>> story2_idee_1
Teich. Shelly war für ihre ruhige und besonnene
```

Lösche einfach die Markierungen und korrigiere den Text passend.  
Wieder ein *add* und ein *commit* und das Problem ist vom Tisch!

Das nachfolgende Diagramm zeigt den Ablauf der Operationen 
zwischen den beiden Zweigen (Idee 2 wurde ausgeblendet, weil 
du mit ihr bisher nichts mehr gemacht hast).

![](bilder/bash/buch_2.png){width=10cm}

Gut - das war ein langer Weg mit vielen Abzweigungen.
Es ist normal, diesen Abschnitt mehrfach lesen zu müssen!

### Fazit

Branches erlauben gefahrloses Arbeiten an Ideen.
Baut man die Szenarien nicht zu komplex auf,
dann gibt auch meist keine Probleme beim Merge.

Immer wenn du Änderungen in einem Zweig vornimmst, die du
auch im anderen Branch menötigst (weiße/weise) kannst du
den Merge auch in die andere Richtung ausführen.
Das ist ein übliches Verfahren weil man als Entwickler
immer auf dem aktuellen Stand des Auslieferungszweigs 
sein muss, auch wenn er weiter an seinem Experiment arbeitet.

Die Vergleiche mit *diff* sind definitiv 
gewöhnungsbedürftig. Machst du häufige Commits 
auch schon bei kleinen Änderungen, so bekommst
du auch übersichtliche *diffs*.

```bash
git diff <commit>..<commit> <datei>
```

Der Nachteil von vielen Commits sind 
allerdings ... viele Commits. Es gibt
allerdings Möglichkeiten nachträglich
Commits zusammenzufassen um die 
Entwicklungsgeschichte zu verschlanken.
Diesen Vorgang nennt man *squashen*.
